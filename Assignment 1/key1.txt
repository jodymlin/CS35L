Kathy Daniels
404887687
Assignment 1
Homework
-------------

Exercise 1.1

2. C-M-s H T M L Enter
3. C-M-s s c a v e n g e r C-m-r Enter
4. C-M-s s e l f - r e f e r e n t i a l C-M-r Enter
5. C-M-s a r r o w C-M-r Enter
6. C-e
7. C-a
9. I didn't move the cursor using arrow keys.
10. C-x C-c

Exercise 1.2

2. M-g g 1 8 Enter C-k
3. C-M-s D E L E T E Enter C-a C-k
4. C-M-s w i k i p e d i a C-M-s M-a C-SP M-e M-e C-w
5. C-M-s < ! - - C-M-r M-z >
   C-n C-a C-SP M-e M-e M-e C-w
   C-M-s < ! C-a C-k

Exercise 1.3

2. M-% A s s i g m e n t SP 1 Enter A s s i g m e n t SP 4 2 Enter y y Enter
3. -% U T F - 8 Enter U S - A S C I I Enter y Enter
4. C-M-s [ ^ [ : a s c i i : ] ] C-M-r C-a M-z >
5. C-M-s < / o l > C-o

Exercise 1.4

3. C-r < ! - C-r C-SP C-M-s > M-w
   C-r < / h t C-r C-n C-y

4. C-M-s < ! - C-M-r C-SP C-M-s > M-w
   C-r h u n t C-r C-n C-n C-y
   
   C-M-s < ! - C-M-s C-M-s C-M-r C-SP C-M-s > M-w
   C-r L e a r n i n g C-r C-n C-n C-y
   
   C-M-s < ! - C-M-s C-M-s C-M-s C-M-r C-SP C-M-s - > M-w
   C-r S u b m i t < C-r C-n C-n C-y
   C-a C-d C-p C-d   

   C-M-s < ! - C-M-s C-M-s C-M-s C-M-s C-M-r C-SP C-M-s > M-w
   C-r n o t h i n g C-r C-s Enter C-y

   C-M-s < ! - C-M-s C-M-s C-M-s C-M-s C-M-s C-M-r C-SP C-M-s - - > M-w
   C-r n o t h i n g C-r C-n C-y
   C-a C-d C-p C-d C-p C-d

5. C-M-s - - - C-M-r C-SP M-> C-w

6. C-x u

7. - - > C-r e n d C-r C-n C-a < ! - -

8. C-r < o l > C-r C-r C-r C-r C-r C-r
   I found 7 instances of "<ol>"

   M-% < o l > Enter < o L > Enter y y y y y y y

Exercise 1.5

1. e m a c s Enter
   M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter
   (Then I copied over the c program into the hello.c file)
3. M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / a . o  u t Enter
5. C-SP M-> M-w C-y
   
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6

1. C-x b * s c r a t c h * Enter
2. ( r a n d o m SP " 4 0 4 - 8 8 7 - 6 8 7 " ) C-j
   I got 979384782580887510
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j
   The result I got was not mathematically correct. My x and y variables were both negative so the answer should be positive, but it output as negative. This error is likely due to overflow.
5. M-: ( * SP x SP y ) Enter 
The output gave me the same result as before, along with 2 extra numbers in parenthesis: 722476222723702156 (#o50066004576607136614, #xa06c04bf61cbd8c). These are the octadecimal and hexadecimal representations of the result, respectively.
6. No, the two random integers cannot be truly random due to deterministic factors influenced by things like seed, computer hardware, time, memory, etc. Computers cannot generate truly random numbers; they are merely "pseudo-random". Moreover, the seed that I gave the function enables it to continuously generate the same sequence of "random" integers over and over again, which can essentially be considered "non-random" behavior.
7. The probability that the two-variable product is mathematically incorrect is P = 1 - (summation x=0 -> n=30 of (2^x * 2^(30-x))/2^60). The range of values for integers on Emacs Lips is -2^29 to -2^29 - 1 so variables x and y can have a total of 2^30 values. Therefore, the total possible values for the product of the 2 integers is 2^60. The numerator in the expression, 2^x * 2^(30-x) represents the product of two integers in which their powers must sum up to at most 30 since there are only 30 possible bits of representation.
