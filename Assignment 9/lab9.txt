Kathy Daniels
404887687
Assignment 9
Laboratory
--------------

1) 

To get a copy of the Diffutils repository in Git format (from its
main Savannah repository), I ran:

  $ git clone https://git.savannah.gnu.org/git/diffutils.git

2)

To get a log of changes to Diffutils' master branch and put it into
the file git-log.txt, I ran:

  $ cd diffutils/
  $ git log > git-log.txt

3)

To generate a list of tags used for Diffutils and put it into the
file git-tags.txt, I ran:

  $ git tag > git-tags.txt

4) 

To find a commit entitled "maint: quote 'like this' or "like this",
not `like this'", generate a patch for the commit, and put it into
the file quote-patch.txt, I ran:

  $ git log --all --grep='maint: quote'
  commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
  Author: Paul Eggert <eggert@cs.ucla.edu>
  Date:   Wed Jan 25 23:46:16 2012 -0800

  $ git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
    --stdout > quote-patch.txt

5)

To check out version 3.0 of Diffiutils from my repository, I first
inspected the git-tags.txt file to see each version, then ran:

  $ git checkout tags/v3.0

6)

I used the patch command to apply quote-patch.txt to version 3.0.
Everytime the command could not figure out what file to patch, I
skipped it by hitting RETURN:

  $ patch -p1 < quote-patch.txt

The errors that appeared were the following:

  Hunk #10 FAILED at 876.
  Hunk #11 FAILED at 906.
  Hunk #12 FAILED at 942.
  3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

  Hunk #6 FAILED at 433.
  1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej

7)

To get an overview of what happened, I ran Git's status command:

  $ git status

# HEAD detached at v3.0
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   NEWS
#	modified:   README
#	modified:   TODO
#	modified:   doc/diagmeet.note
#	modified:   ms/config.bat
#	modified:   ms/config.site
#	modified:   po/en.po
#	modified:   src/analyze.c
#	modified:   src/cmp.c
#	modified:   src/context.c
#	modified:   src/diff.c
#	modified:   src/diff.h
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/ifdef.c
#	modified:   src/io.c
#	modified:   src/sdiff.c
#	modified:   src/side.c
#	modified:   src/system.h
#	modified:   src/util.c
#	modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	NEWS.orig
#	README-hacking.orig
#	README-hacking.rej
#	README.orig
#	README.rej
#	cfg.mk.orig
#	cfg.mk.rej
#	git-log.txt
#	git-tags.txt
#	ms/config.site.orig
#	quote-patch.txt
#	src/cmp.c.orig
#	src/context.c.orig
#	src/diff.c.orig
#	src/diff.c.rej
#	src/diff.h.orig
#	src/diff3.c.orig
#	src/diff3.c.rej
#	src/dir.c.orig
#	src/sdiff.c.orig
#	src/system.h.orig
#	src/util.c.orig
#	tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")

8)
 
I learned how to use the Emacs functions vc-diff (C-x v =) and
vc-revert (C-x v u). I used describe-mode (C-h m) in the *vc-diff*
buffer generated by vc-diff to learn how to use the diff-apply-hunk
(C-c C-a) and diff-goto-source (C-c C-c) functions.

vc-diff : Compare the work files in the current VC fileset with the
	  versions you started from

vc-revert : Revert the work file(s) in the current VC fileset to the
            last revision

diff-apply-hunk : Apply this hunk to its target file

diff-goto-source : Go to the source file and line corresponding to this
		  hunk

9)

To revert all the changes to files other than .c files in Emacs, I
opened each of the appropiate files, ran vc-revert, and typed yes
when prompted for confirmation to discard changes:

  $ emacs <FILENAME>
  C-x v u
  (Entered 'yes' when prompted)

The files I reverted were NEWS, README, TODO, doc/diagmeet.note,
ms/config.bat, ms/config.site, po/en.po, src/diff.h, src/system.h,
and tests/help-version.

To undo all the changes to .c files other than changes to character
string constants, I opened each .c file, used vc-diff to see each
change, and used diff-apply-hunk to revert the appropiate changes:

  $ emacs <FILENAME>
  C-x v =
  C-u C-c C-a 

The files I changed were src/analyze.c, src/cmp.c, src/context.c,
src/diff.c, src/diff3.c, src/dir.c, src/ifdef.c, src/io.c, src/sdiff.c,
src/side.c, and src/util.c.

The only files that contained changes to charaacter string constants
(which I kept) were src/cmp.c, src/diff.c, src/diff3.c, src/dir.c,
src/sdiff.c, and src/util.c.

10)

To find files in the src directory that ended in .c.rej, I ran:

  $ cd src
  $ find *.c.rej
  diff3.c.rej
  diff.c.rej

There were only 2 files that came up, so I opened each of these and
manually replaced every instance of ` with ' in the corresponding
files wherever the patches specified.

  $ emacs diff3.c.rej
  $ emacs diff.c.rej

  (In a different window, using C-s to search for the correct statements)
  $ emacs diff3.c
  $ emacs diff.c

11)

To remove all untracked files that git status warns me about, I first
moved the files I made earlier outside of the directory, then used
the clean command to get rid of everything else:

  $ mv git-log.txt ..
  $ mv git-tags.txt ..
  $ mv quote-patch.txt ..
  $ git clean -f

12)

Now running git status, I see the following 6 modified files:

  $ git status
  modified:   src/cmp.c
  modified:   src/diff.c
  modified:   src/diff3.c
  modified:   src/dir.c
  modified:   src/sdiff.c
  modified:   src/util.c

I then produced a patch with 3 or 4 hundred lines, putting it into a
file called quote-3.0-patch.txt:

  $ git diff > quote-3.0-patch.txt
  $ mv quote-3.0-patch.txt
  $ cat quote-3.0-patch.txt | wc -l
  326

13) 

I examined the contents of README-hacking in order to build the
resulting modified version of Diffutils. Since I am using lnxsrv03,
I didn't have to apply an additional patch:

  $ ./bootstrap
  $ ./configure
  $ make
  $ make check

I recieved no errors with a message telling me that "All 88 tests passed".
To verify that Diffutils does the right thing, I ran the
following two commands:

  $ src/diff . -
  diff: cannot compare '-' to a directory

  $ src/diff --help

The output for this second command was a bit long, but examining the
few lines I know I edited earlier, we can see that it outputs with '
rather than `. Here are a few examples:

  -l  --paginate  Pass the output through 'pr' to paginate it.

  FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'.

  If a FILE is '-', read standard input.

  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'.

14)

I now perform a sanity test by using the just-built diff to compare
the source code of Diffutils 3.0 to the source code of my modified version.

I started by copying the source code of the modified version into a
new directory:

  $ cd ..
  $ mkdir diffutils-3.0-patch
  $ cp -r diffutils/src/*.c ./diffutils-3.0-patch

I then cloned a new unmodified version of diffutils into another 
folder and changed the version to v3.0 as I did previously:

  $ git clone https://git.savannah.gnu.org/git/diffutils.git
    diffutils-original
  $ cd diffutils-original
  $ git checkout tags/v3.0
  $ cd ..

Next I copied the source code of the unmodified 3.0 version into
a new directory:

  $ mkdir diffutils-3.0
  $ cp -r diffutils-original/src/*.c ./diffutils-3.0

I then ran my implementation of diff with the following command:

  $ diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch 
    > quote-3.0-test.txt

15)

Lastly, I used diff to compare the contents of quote-3.0-test.txt and
quote-3.0-patch.txt to see the differences or similarities:

  $ diffutils/src/diff quote-3.0-patch.txt quote-3.0-test.txt

The output was very lengthy, but after a closer look, I can see that
the files are (correctly) not identical, with only minor differences
in corrections from ` to '.
